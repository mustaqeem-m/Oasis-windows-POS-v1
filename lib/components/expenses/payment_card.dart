import 'package:flutter/material.dart';import 'package:flutter/services.dart';import '../../helpers/SizeConfig.dart';import '../../locale/MyLocalizations.dart';import 'card_header.dart';class PaymentCard extends StatelessWidget {  final ThemeData themeData;  final TextEditingController payingAmount;  final String symbol;  final String? Function(String?) payingAmountValidator;  final Map<String, dynamic> selectedPaymentMethod;  final List<Map<String, dynamic>> paymentMethods;  final Function(Map<String, dynamic>?) onPaymentMethodChanged;  final Map<String, dynamic> selectedPaymentAccount;  final List<Map<String, dynamic>> paymentAccounts;  final Function(Map<String, dynamic>?) onPaymentAccountChanged;  const PaymentCard({    super.key,    required this.themeData,    required this.payingAmount,    required this.symbol,    required this.payingAmountValidator,    required this.selectedPaymentMethod,    required this.paymentMethods,    required this.onPaymentMethodChanged,    required this.selectedPaymentAccount,    required this.paymentAccounts,    required this.onPaymentAccountChanged,  });  @override  Widget build(BuildContext context) {    return Card(      elevation: 4,      shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(MySize.size12!)),      child: Padding(        padding: EdgeInsets.all(MySize.size16!),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            buildCardHeader(                AppLocalizations.of(context).translate('payment'), themeData),            SizedBox(height: MySize.size16!),            TextFormField(              validator: payingAmountValidator,              decoration: InputDecoration(                prefixText: symbol,                labelText:                    AppLocalizations.of(context).translate('payment_amount'),                border: OutlineInputBorder(                  borderRadius: BorderRadius.circular(MySize.size8!),                ),                prefixIcon: Icon(Icons.payment),              ),              controller: payingAmount,              keyboardType: TextInputType.number,              inputFormatters: [                FilteringTextInputFormatter.allow(RegExp(r'^(\d+)?\.?\d{0,2}')),              ],              textAlign: TextAlign.start,            ),            SizedBox(height: MySize.size16!),            DropdownButtonFormField<Map<String, dynamic>>(              value: selectedPaymentMethod,              dropdownColor: themeData.colorScheme.surface,              items: paymentMethods.map((item) {                return DropdownMenuItem<Map<String, dynamic>>(                  value: item,                  child: Text(item['value'],                      overflow: TextOverflow.ellipsis,                      style: const TextStyle(color: Colors.black)),                );              }).toList(),              onChanged: onPaymentMethodChanged,              decoration: InputDecoration(                labelText:                    AppLocalizations.of(context).translate('payment_method'),                border: OutlineInputBorder(                  borderRadius: BorderRadius.circular(MySize.size8!),                ),                prefixIcon: Icon(Icons.credit_card),              ),            ),            SizedBox(height: MySize.size16!),            DropdownButtonFormField<Map<String, dynamic>>(              value: selectedPaymentAccount,              dropdownColor: themeData.colorScheme.surface,              items: paymentAccounts.map((item) {                return DropdownMenuItem<Map<String, dynamic>>(                  value: item,                  child: Text(                    item['name'],                    overflow: TextOverflow.ellipsis,                    style: TextStyle(color: Colors.black),                  ),                );              }).toList(),              onChanged: onPaymentAccountChanged,              decoration: InputDecoration(                labelText:                    AppLocalizations.of(context).translate('payment_account'),                border: OutlineInputBorder(                  borderRadius: BorderRadius.circular(MySize.size8!),                ),                prefixIcon: Icon(Icons.account_balance),                filled: true,                fillColor: themeData.colorScheme.surface,              ),            ),          ],        ),      ),    );  }}